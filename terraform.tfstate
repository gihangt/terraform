{
  "version": 4,
  "terraform_version": "1.5.3",
  "serial": 31,
  "lineage": "fbee722f-b0b9-9f78-9651-ae4dea436972",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "argo-cd",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argocd",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v2.7.2",
                "chart": "argo-cd",
                "name": "argocd",
                "namespace": "argocd",
                "revision": 1,
                "values": "{\"notifications\":{\"affinity\":{},\"argocdUrl\":null,\"cm\":{\"create\":true},\"containerPorts\":{\"metrics\":9001},\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]},\"readOnlyRootFilesystem\":true,\"runAsNonRoot\":true,\"seccompProfile\":{\"type\":\"RuntimeDefault\"}},\"context\":{},\"deploymentAnnotations\":{},\"deploymentStrategy\":{\"type\":\"Recreate\"},\"dnsConfig\":{},\"dnsPolicy\":\"ClusterFirst\",\"enabled\":true,\"extraArgs\":[],\"extraContainers\":[],\"extraEnv\":[],\"extraEnvFrom\":[],\"extraVolumeMounts\":[],\"extraVolumes\":[],\"image\":{\"imagePullPolicy\":\"\",\"repository\":\"\",\"tag\":\"\"},\"imagePullSecrets\":[],\"initContainers\":[],\"logFormat\":\"Json\",\"logLevel\":\"info\",\"metrics\":{\"enabled\":false,\"port\":9001,\"service\":{\"annotations\":{},\"clusterIP\":\"\",\"labels\":{},\"portName\":\"http-metrics\",\"type\":\"ClusterIP\"},\"serviceMonitor\":{\"additionalLabels\":{},\"annotations\":{},\"enabled\":false,\"metricRelabelings\":[],\"relabelings\":[],\"scheme\":\"\",\"selector\":{},\"tlsConfig\":{}}},\"name\":\"notifications-controller\",\"nodeSelector\":{},\"notifiers\":{\"service.telegram\":\"token: $telegram-token\\n\"},\"pdb\":{\"annotations\":{},\"enabled\":false,\"labels\":{},\"maxUnavailable\":\"\",\"minAvailable\":\"\"},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"resources\":{},\"secret\":{\"annotations\":{},\"create\":true,\"items\":{\"telegram-token\":\"6512248302:AAGdTEEke-Wk5rtQ0XQmNW5NhKNwOP86Wns\"}},\"serviceAccount\":{\"annotations\":{},\"automountServiceAccountToken\":true,\"create\":true,\"labels\":{},\"name\":\"argocd-notifications-controller\"},\"subscriptions\":[{\"recipients\":[\"telegram:gihannew\"],\"triggers\":[\"on-sync-status-unknown\",\"on-sync-failed\",\"on-sync-succeeded\",\"on-health-degraded\"]}],\"templates\":{\"template.app-deployed\":\"message: |\\n  {{if eq .serviceType \\\"telegram\\\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\\n\",\"template.app-health-degraded\":\"message: |\\n  {{if eq .serviceType \\\"slack\\\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\\n  Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\\n\",\"template.app-sync-failed\":\"message: |\\n  {{if eq .serviceType \\\"telegram\\\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\\n\",\"template.app-sync-succeeded\":\"message: |\\n  {{if eq .serviceType \\\"telegram\\\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\\n  Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\\n\"},\"tolerations\":[],\"topologySpreadConstraints\":[],\"triggers\":{\"trigger.on-deployed\":\"- description: Application is synced and healthy. Triggered once per commit.\\n  oncePer: app.status.sync.revision\\n  send:\\n  - app-deployed\\n  when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'\\n\",\"trigger.on-health-degraded\":\"- description: Application has degraded\\n  send:\\n  - app-health-degraded\\n  when: app.status.health.status == 'Degraded'\\n\",\"trigger.on-sync-failed\":\"- description: Application syncing has failed\\n  send:\\n  - app-sync-failed\\n  when: app.status.operationState.phase in ['Error', 'Failed']\\n\",\"trigger.on-sync-succeeded\":\"- description: Application syncing has succeeded\\n  send:\\n  - app-sync-succeeded\\n  when: app.status.operationState.phase in ['Succeeded']\"}}}",
                "version": "5.34.4"
              }
            ],
            "name": "argocd",
            "namespace": "argocd",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "## Notifications controller\nnotifications:\n  # -- Enable notifications controller\n  enabled: true\n\n  # -- Notifications controller name string\n  name: notifications-controller\n\n  # -- Argo CD dashboard url; used in place of {{.context.argocdUrl}} in templates\n  argocdUrl:\n\n  ## Notifications controller Pod Disruption Budget\n  ## Ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/\n  pdb:\n    # -- Deploy a [PodDisruptionBudget] for the notifications controller\n    enabled: false\n    # -- Labels to be added to notifications controller pdb\n    labels: {}\n    # -- Annotations to be added to notifications controller pdb\n    annotations: {}\n    # -- Number of pods that are available after eviction as number or percentage (eg.: 50%)\n    # @default -- `\"\"` (defaults to 0 if not specified)\n    minAvailable: \"\"\n    # -- Number of pods that are unavailable after eviction as number or percentage (eg.: 50%).\n    ## Has higher precedence over `notifications.pdb.minAvailable`\n    maxUnavailable: \"\"\n\n  ## Notifications controller image\n  image:\n    # -- Repository to use for the notifications controller\n    # @default -- `\"\"` (defaults to global.image.repository)\n    repository: \"\"\n    # -- Tag to use for the notifications controller\n    # @default -- `\"\"` (defaults to global.image.tag)\n    tag: \"\"\n    # -- Image pull policy for the notifications controller\n    # @default -- `\"\"` (defaults to global.image.imagePullPolicy)\n    imagePullPolicy: \"\"\n\n  # -- Secrets with credentials to pull images from a private registry\n  # @default -- `[]` (defaults to global.imagePullSecrets)\n  imagePullSecrets: []\n\n  # -- Notifications controller log format. Either `text` or `json`\n  # @default -- `\"\"` (defaults to global.logging.format)\n  logFormat: \"Json\"\n  # -- Notifications controller log level. One of: `debug`, `info`, `warn`, `error`\n  # @default -- `\"\"` (defaults to global.logging.level)\n  logLevel: \"info\"\n\n  # -- Extra arguments to provide to the notifications controller\n  extraArgs: []\n\n  # -- Additional container environment variables\n  extraEnv: []\n\n  # -- envFrom to pass to the notifications controller\n  # @default -- `[]` (See [values.yaml])\n  extraEnvFrom: []\n    # - configMapRef:\n    #     name: config-map-name\n    # - secretRef:\n    #     name: secret-name\n\n  # -- Additional containers to be added to the notifications controller pod\n  ## Note: Supports use of custom Helm templates\n  extraContainers: []\n\n  # -- Init containers to add to the notifications controller pod\n  ## Note: Supports use of custom Helm templates\n  initContainers: []\n\n  # -- List of extra mounts to add (normally used with extraVolumes)\n  extraVolumeMounts: []\n\n  # -- List of extra volumes to add\n  extraVolumes: []\n\n  # -- Define user-defined context\n  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/#defining-user-defined-context\n  context: {}\n    # region: east\n    # environmentName: staging\n\n  secret:\n    # -- Whether helm chart creates notifications controller secret\n    create: true\n\n    # -- key:value pairs of annotations to be added to the secret\n    annotations: {}\n\n    # -- Generic key:value pairs to be inserted into the secret\n    ## Can be used for templates, notification services etc. Some examples given below.\n    ## For more information: https://argocd-notifications.readthedocs.io/en/stable/services/overview/\n    items: \n      telegram-token: \"6512248302:AAGdTEEke-Wk5rtQ0XQmNW5NhKNwOP86Wns\"\n      #   # For more information: https://argocd-notifications.readthedocs.io/en/stable/services/slack/\n\n      # grafana-apiKey:\n      #   # For more information: https://argocd-notifications.readthedocs.io/en/stable/services/grafana/\n\n      # webhooks-github-token:\n        # For more information: https://argocd-notifications.readthedocs.io/en/stable/services/email/\n\n  metrics:\n    # -- Enables prometheus metrics server\n    enabled: false\n    # -- Metrics port\n    port: 9001\n    service:\n      # -- Metrics service type\n      type: ClusterIP\n      # -- Metrics service clusterIP. `None` makes a \"headless service\" (no virtual IP)\n      clusterIP: \"\"\n      # -- Metrics service annotations\n      annotations: {}\n      # -- Metrics service labels\n      labels: {}\n      # -- Metrics service port name\n      portName: http-metrics\n    serviceMonitor:\n      # -- Enable a prometheus ServiceMonitor\n      enabled: false\n      # -- Prometheus ServiceMonitor selector\n      selector: {}\n        # prometheus: kube-prometheus\n      # -- Prometheus ServiceMonitor labels\n      additionalLabels: {}\n      # -- Prometheus ServiceMonitor annotations\n      annotations: {}\n      # namespace: monitoring\n      # interval: 30s\n      # scrapeTimeout: 10s\n      # -- Prometheus ServiceMonitor scheme\n      scheme: \"\"\n      # -- Prometheus ServiceMonitor tlsConfig\n      tlsConfig: {}\n      # -- Prometheus [RelabelConfigs] to apply to samples before scraping\n      relabelings: []\n      # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion\n      metricRelabelings: []\n\n  # -- Configures notification services such as slack, email or custom webhook\n  # @default -- See [values.yaml]\n  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/services/overview/\n  notifiers:\n    service.telegram: |\n          token: $telegram-token\n    # service.slack: |\n    #   token: $slack-token\n\n\n  # -- Annotations to be applied to the notifications controller Deployment\n  deploymentAnnotations: {}\n\n  # -- Annotations to be applied to the notifications controller Pods\n  podAnnotations: {}\n\n  # -- Labels to be applied to the notifications controller Pods\n  podLabels: {}\n\n  # -- Resource limits and requests for the notifications controller\n  resources: {}\n    # limits:\n    #   cpu: 100m\n    #   memory: 128Mi\n    # requests:\n    #   cpu: 100m\n    #   memory: 128Mi\n\n  # Notification controller container ports\n  containerPorts:\n    # -- Metrics container port\n    metrics: 9001\n\n  # -- [DNS configuration]\n  dnsConfig: {}\n  # -- Alternative DNS policy for notifications controller Pods\n  dnsPolicy: \"ClusterFirst\"\n\n  # -- Notification controller container-level security Context\n  # @default -- See [values.yaml]\n  containerSecurityContext:\n    runAsNonRoot: true\n    readOnlyRootFilesystem: true\n    allowPrivilegeEscalation: false\n    seccompProfile:\n      type: RuntimeDefault\n    capabilities:\n      drop:\n      - ALL\n\n  # -- [Node selector]\n  # @default -- `{}` (defaults to global.nodeSelector)\n  nodeSelector: {}\n\n  # -- [Tolerations] for use with node taints\n  # @default -- `[]` (defaults to global.tolerations)\n  tolerations: []\n\n  # -- Assign custom [affinity] rules\n  # @default -- `{}` (defaults to global.affinity preset)\n  affinity: {}\n\n  # -- Assign custom [TopologySpreadConstraints] rules to the application controller\n  # @default -- `[]` (defaults to global.topologySpreadConstraints)\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n  ## If labelSelector is left out, it will default to the labelSelector configuration of the deployment\n  topologySpreadConstraints: []\n    # - maxSkew: 1\n    #   topologyKey: topology.kubernetes.io/zone\n    #   whenUnsatisfiable: DoNotSchedule\n\n  # -- Deployment strategy to be added to the notifications controller Deployment\n  deploymentStrategy:\n    type: Recreate\n\n  # -- Priority class for the notifications controller pods\n  # @default -- `\"\"` (defaults to global.priorityClassName)\n  priorityClassName: \"\"\n\n  serviceAccount:\n    # -- Create notifications controller service account\n    create: true\n    # -- Notification controller service account name\n    name: argocd-notifications-controller\n    # -- Annotations applied to created service account\n    annotations: {}\n    # -- Labels applied to created service account\n    labels: {}\n    # -- Automount API credentials for the Service Account\n    automountServiceAccountToken: true\n\n  cm:\n    # -- Whether helm chart creates notifications controller config map\n    create: true\n\n  # -- Contains centrally managed global application subscriptions\n  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/subscriptions/\n  subscriptions: \n    # # subscription for on-sync-status-unknown trigger notifications\n    - recipients:\n      - telegram:gihannew\n      triggers:\n      - on-sync-status-unknown\n      - on-sync-failed\n      - on-sync-succeeded\n      - on-health-degraded\n    # # subscription restricted to applications with matching labels only\n    # - recipients:\n    #   - slack:test3\n    #   selector: test=true\n    #   triggers:\n    #   - on-sync-status-unknown\n\n  # -- The notification template is used to generate the notification content\n  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/\n  templates:\n    template.app-deployed: |\n        message: |\n          {{if eq .serviceType \"telegram\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.\n    template.app-health-degraded: |\n        message: |\n          {{if eq .serviceType \"slack\"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.\n          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.\n    template.app-sync-failed: |\n        message: |\n          {{if eq .serviceType \"telegram\"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}\n          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\n    template.app-sync-succeeded: |\n        message: |\n          {{if eq .serviceType \"telegram\"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{.app.status.operationState.finishedAt}}.\n          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .\n  # -- The trigger defines the condition when the notification should be sent\n  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/\n  triggers:\n    trigger.on-deployed: |\n        - description: Application is synced and healthy. Triggered once per commit.\n          oncePer: app.status.sync.revision\n          send:\n          - app-deployed\n          when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'\n    trigger.on-health-degraded: |\n        - description: Application has degraded\n          send:\n          - app-health-degraded\n          when: app.status.health.status == 'Degraded'\n    trigger.on-sync-failed: |\n        - description: Application syncing has failed\n          send:\n          - app-sync-failed\n          when: app.status.operationState.phase in ['Error', 'Failed']\n    trigger.on-sync-succeeded: |\n        - description: Application syncing has succeeded\n          send:\n          - app-sync-succeeded\n          when: app.status.operationState.phase in ['Succeeded']"
            ],
            "verify": false,
            "version": "5.34.4",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_pod",
      "name": "nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "default/terraform-example",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": {
                  "app": "nginx"
                },
                "name": "terraform-example",
                "namespace": "default",
                "resource_version": "485",
                "uid": "8cd40704-41de-4491-90b5-7e00edc2bb24"
              }
            ],
            "spec": [
              {
                "active_deadline_seconds": 0,
                "affinity": [],
                "automount_service_account_token": true,
                "container": [
                  {
                    "args": null,
                    "command": null,
                    "env": [],
                    "env_from": [],
                    "image": "nginx:1.23.2",
                    "image_pull_policy": "IfNotPresent",
                    "lifecycle": [],
                    "liveness_probe": [],
                    "name": "example",
                    "port": [],
                    "readiness_probe": [],
                    "resources": [
                      {
                        "limits": {},
                        "requests": {}
                      }
                    ],
                    "security_context": [],
                    "startup_probe": [],
                    "stdin": false,
                    "stdin_once": false,
                    "termination_message_path": "/dev/termination-log",
                    "termination_message_policy": "File",
                    "tty": false,
                    "volume_mount": [],
                    "working_dir": ""
                  }
                ],
                "dns_config": [],
                "dns_policy": "ClusterFirst",
                "enable_service_links": true,
                "host_aliases": [],
                "host_ipc": false,
                "host_network": false,
                "host_pid": false,
                "hostname": "",
                "image_pull_secrets": [],
                "init_container": [],
                "node_name": "docker-desktop",
                "node_selector": null,
                "priority_class_name": "",
                "readiness_gate": [],
                "restart_policy": "Always",
                "runtime_class_name": "",
                "scheduler_name": "default-scheduler",
                "security_context": [],
                "service_account_name": "default",
                "share_process_namespace": false,
                "subdomain": "",
                "termination_grace_period_seconds": 30,
                "toleration": [],
                "topology_spread_constraint": [],
                "volume": []
              }
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDAsImRlbGV0ZSI6MzAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_service",
      "name": "nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "default/terraform-example",
            "metadata": [
              {
                "annotations": null,
                "generate_name": "",
                "generation": 0,
                "labels": null,
                "name": "terraform-example",
                "namespace": "default",
                "resource_version": "488",
                "uid": "8e57eb47-3dd5-4e5b-b3a7-5914a5a038a9"
              }
            ],
            "spec": [
              {
                "allocate_load_balancer_node_ports": true,
                "cluster_ip": "10.99.227.161",
                "cluster_ips": [
                  "10.99.227.161"
                ],
                "external_ips": null,
                "external_name": "",
                "external_traffic_policy": "Cluster",
                "health_check_node_port": 0,
                "internal_traffic_policy": "Cluster",
                "ip_families": [
                  "IPv4"
                ],
                "ip_family_policy": "SingleStack",
                "load_balancer_class": "",
                "load_balancer_ip": "",
                "load_balancer_source_ranges": null,
                "port": [
                  {
                    "app_protocol": "",
                    "name": "",
                    "node_port": 31281,
                    "port": 80,
                    "protocol": "TCP",
                    "target_port": "80"
                  }
                ],
                "publish_not_ready_addresses": false,
                "selector": {
                  "app": "nginx"
                },
                "session_affinity": "None",
                "session_affinity_config": [],
                "type": "NodePort"
              }
            ],
            "status": [
              {
                "load_balancer": [
                  {
                    "ingress": []
                  }
                ]
              }
            ],
            "timeouts": null,
            "wait_for_load_balancer": true
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "kubernetes_pod.nginx"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
